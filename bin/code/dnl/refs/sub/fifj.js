const a = ['kvRWb', 'remove', 'globalCompositeOperation', 'overlay', 'rgba(255,255,255,0.1)', 'arc', 'use\x20strict', 'getElementById', 'canvas', 'getContext', 'width', 'innerWidth', 'height', 'innerHeight', '00061a', 'length', 'aunRE', 'floor', 'random', 'match', 'forEach', 'rgba(', 'hsl(', ',100%,55%)', 'origColor', 'prototype', 'DrRgh', 'fillRect', 'requestAnimationFrame', 'addEventListener', 'mousemove', 'toUpperCase', 'slice', 'ready', '#input', 'val', 'css', 'color', 'Infinity', 'focus', '#codeField', 'addClass', 'animated\x20pulse', 'click', '#000000', 'focusout', 'removeClass', 'sDKPm', 'PekZg', 'speed', 'save', 'beginPath', 'createRadialGradient', 'size', 'addColorStop', '#fff', 'rect', 'fillStyle', 'fill', 'closePath', 'restore', 'keyup', 'XsCCD', 'cDcby', 'nGQjY', 'append', 'apply', 'trigger', '#futureButton', 'bind', 'Jfstu', 'exDTP', '#fifTStage', 'animate', 'location', 'assign', '../../refs/min/las.html', '<input\x20type=\x22button\x22\x20class=\x22btn\x20btn-primary\x20btn-lg\x22\x20value=\x22You\x20know\x20me\x20the\x20best\x22\x20id=\x22fifTStage\x22\x20/>', '0.2', 'moveTo', 'lineTo', 'bezierCurveTo', 'fall', 'rZEYR']; (function (c, d) { const e = function (f) { while (--f) { c.push(c.shift()); } }; e(++d); }(a, 0x11b)); const b = function (c, d) { c -= 0x0; const e = a[c]; return e; }; function capitalize(k) { return k && k[0x0][b('0x0')]() + k[b('0x1')](0x1); }$(document)[b('0x2')](() => { const l = $(b('0x3'))[b('0x4')](); const m = $(b('0x3'))[b('0x5')](b('0x6')); let n = ![]; const o = b('0x7'); $(b('0x3'))[b('0x8')](() => { $(b('0x9'))[b('0xa')](b('0xb')); })[b('0xc')](() => { if ($(b('0x3'))[b('0x4')]() === l) { $(b('0x3'))[b('0x4')]('')[b('0x5')](b('0x6'), b('0xd')); } })[b('0xe')](() => { $(b('0x9'))[b('0xf')](b('0xb')); if ($(b('0x3'))[b('0x4')]() === '') { if (b('0x10') !== b('0x11')) { $(b('0x3'))[b('0x4')](l)[b('0x5')](b('0x6'), m); } else { this.y += this[b('0x12')]; if (this.y >= canvasH) { this.y = random(-canvasH); this.x = random(canvasW); }ctx[b('0x13')](); ctx[b('0x14')](); const i = ctx[b('0x15')](this.x, this.y, 0x0, this.x, this.y, this[b('0x16')]); i[b('0x17')](0x0, b('0x18')); i[b('0x17')](0.5, this[b('0x6')]); i[b('0x17')](0x1, hexToRGB(bg, 0x0)); ctx[b('0x19')](this.x, this.y, this[b('0x16')], maxSpeed); ctx[b('0x1a')] = i; ctx[b('0x1b')](); ctx[b('0x1c')](); ctx[b('0x1d')](); } } }); $(b('0x3')).on(b('0x1e'), () => { if (b('0x1f') !== b('0x20')) { if (capitalize($(b('0x3'))[b('0x4')]()) === o && !n) { if (b('0x21') === b('0x21')) { (function (r) { const s = r.fn[b('0x22')]; r.fn[b('0x22')] = function () { return s[b('0x23')](this, arguments)[b('0x24')](b('0x22')); }; }(jQuery)); $(b('0x25'))[b('0x26')](b('0x22'), () => { if (b('0x27') !== b('0x28')) { $(b('0x29'))[b('0x2a')]({ opacity: '1' }, 0xfa); } else { window[b('0x2b')][b('0x2c')](b('0x2d')); } }); $(b('0x25'))[b('0x22')](b('0x2e')); n = !![]; } else { ctx[b('0x1a')] = hexToRGB(bg, b('0x2f')); ctx[b('0x14')](); ctx[b('0x30')](0x0, 0x0); ctx[b('0x31')](canvasWHalf, 0x0); ctx[b('0x31')](0x130 + xoff, 0x61 + yoff); ctx[b('0x32')](0x11a + xoff, 0xf + yoff, 0x50 + xoff, -0x6 + yoff, 0x4c + xoff, 0xa5 + yoff); ctx[b('0x32')](0x4a + xoff, 0xfb + yoff, 0xb8 + xoff, 0x12c + yoff, 0x130 + xoff, 0x1bf + yoff); ctx[b('0x31')](canvasWHalf, canvasH); ctx[b('0x31')](0x0, canvasH); ctx[b('0x30')](canvasW, 0x0); ctx[b('0x31')](canvasWHalf, 0x0); ctx[b('0x31')](0x130 + xoff, 0x61 + yoff); ctx[b('0x32')](0x146 + xoff, 0x5 + yoff, 0x210 + xoff, 0x6 + yoff, 0x214 + xoff, 0xa5 + yoff); ctx[b('0x32')](0x216 + xoff, 0xfb + yoff, 0x1a8 + xoff, 0x12c + yoff, 0x130 + xoff, 0x1bf + yoff); ctx[b('0x31')](canvasWHalf, canvasH); ctx[b('0x31')](canvasW, canvasH); ctx[b('0x1c')](); ctx[b('0x1b')](); for (let h = 0x1; h < id; h++) { raindrops[h][b('0x33')](); } } } else if (n && capitalize($(b('0x3'))[b('0x4')]()) !== o) { if (b('0x34') !== b('0x35')) { $(b('0x29'))[b('0x2a')]({ opacity: '0' }, 0xfa, () => { $(b('0x29'))[b('0x36')](); }); n = ![]; } else { ctx[b('0x13')](); ctx[b('0x37')] = b('0x38'); ctx[b('0x1a')] = b('0x39'); ctx[b('0x3a')](x, y, 0x32, 0x0, Math.PI * 0x2); ctx[b('0x1b')](); ctx[b('0x1d')](); } } } else { mouseTrail(cursor.x, cursor.y); } }); }); $(b('0x25')).on(b('0xc'), b('0x29'), () => { window[b('0x2b')][b('0x2c')](b('0x2d')); }); b('0x3b'); let canvas = document[b('0x3c')](b('0x3d')),
  ctx = canvas[b('0x3e')]('2d'),
  canvasW = canvas[b('0x3f')] = window[b('0x40')],
  canvasH = canvas[b('0x41')] = window[b('0x42')],
  canvasWHalf = canvasW / 0x2,
  canvasHHalf = canvasH / 0x2,
  xoff = canvasWHalf - 0x132,
  yoff = 0x0,
  bg = b('0x43'),
  id = 0x0,
  raindrops = [],
  minSize = 0x1,
  maxSize = 0x4,
  minSpeed = 0x5,
  maxSpeed = 0x14,
  minHue = 0x0,
  maxHue = 0x168,
  maxAmount = 0x32; function random(y, z) { if (arguments[b('0x44')] < 0x2) { if (b('0x45') !== b('0x45')) { rgb += `${parseInt(n, 0x10)},`; } else { z = y; y = 0x0; } } return Math[b('0x46')](Math[b('0x47')]() * (z - y) + y); } function hexToRGB(B, C) { let D = ''; B[b('0x48')](/.{2}/g)[b('0x49')]((E) => { D += `${parseInt(E, 0x10)},`; }); return `${b('0x4a') + D + C})`; } function draw() { ctx[b('0x1a')] = hexToRGB(bg, b('0x2f')); ctx[b('0x14')](); ctx[b('0x30')](0x0, 0x0); ctx[b('0x31')](canvasWHalf, 0x0); ctx[b('0x31')](0x130 + xoff, 0x61 + yoff); ctx[b('0x32')](0x11a + xoff, 0xf + yoff, 0x50 + xoff, -0x6 + yoff, 0x4c + xoff, 0xa5 + yoff); ctx[b('0x32')](0x4a + xoff, 0xfb + yoff, 0xb8 + xoff, 0x12c + yoff, 0x130 + xoff, 0x1bf + yoff); ctx[b('0x31')](canvasWHalf, canvasH); ctx[b('0x31')](0x0, canvasH); ctx[b('0x30')](canvasW, 0x0); ctx[b('0x31')](canvasWHalf, 0x0); ctx[b('0x31')](0x130 + xoff, 0x61 + yoff); ctx[b('0x32')](0x146 + xoff, 0x5 + yoff, 0x210 + xoff, 0x6 + yoff, 0x214 + xoff, 0xa5 + yoff); ctx[b('0x32')](0x216 + xoff, 0xfb + yoff, 0x1a8 + xoff, 0x12c + yoff, 0x130 + xoff, 0x1bf + yoff); ctx[b('0x31')](canvasWHalf, canvasH); ctx[b('0x31')](canvasW, canvasH); ctx[b('0x1c')](); ctx[b('0x1b')](); for (let F = 0x1; F < id; F++) { raindrops[F][b('0x33')](); } } const Raindrop = function () { id++; this.y = random(-canvasH); this.x = random(canvasW); this[b('0x16')] = random(minSize, maxSize); this[b('0x12')] = random(minSpeed, maxSpeed); this[b('0x6')] = b('0x4b') + random(minHue, maxHue) + b('0x4c'); this[b('0x4d')] = this[b('0x6')]; this.id = id; raindrops[id] = this; }; Raindrop[b('0x4e')][b('0x33')] = function () { this.y += this[b('0x12')]; if (this.y >= canvasH) { if (b('0x4f') !== b('0x4f')) { max = min; min = 0x0; } else { this.y = random(-canvasH); this.x = random(canvasW); } }ctx[b('0x13')](); ctx[b('0x14')](); const H = ctx[b('0x15')](this.x, this.y, 0x0, this.x, this.y, this[b('0x16')]); H[b('0x17')](0x0, b('0x18')); H[b('0x17')](0.5, this[b('0x6')]); H[b('0x17')](0x1, hexToRGB(bg, 0x0)); ctx[b('0x19')](this.x, this.y, this[b('0x16')], maxSpeed); ctx[b('0x1a')] = H; ctx[b('0x1b')](); ctx[b('0x1c')](); ctx[b('0x1d')](); }; (function init() { ctx[b('0x1a')] = `#${bg}`; ctx[b('0x50')](0x0, 0x0, canvasW, canvasH); for (let I = 0x0; I < maxAmount; I++) { new Raindrop(); } }()); function animate() { draw(); window[b('0x51')](animate); }window[b('0x51')](animate); function mouseTrail(J, K) { ctx[b('0x13')](); ctx[b('0x37')] = b('0x38'); ctx[b('0x1a')] = b('0x39'); ctx[b('0x3a')](J, K, 0x32, 0x0, Math.PI * 0x2); ctx[b('0x1b')](); ctx[b('0x1d')](); }window[b('0x52')](b('0x53'), (L) => { mouseTrail(L.x, L.y); });
